#!/bin/bash

CTRLDIR=~/run-cicd

echo ""
echo "************* RUN DEPLOY service *****************"
echo ""


if ([ $# -lt 3 ]) || ([ $# -eq 1 ] && [ "$1" == "-h" -o "$1" == "--help" ]); then
  echo "deploy <k8s-context> <profile> <root directory>"
  echo " k8s-context: 사용할 k8s context명. kubectl config view로 context 목록 확인. '.'은 현재 컨텍스트 의미함 "
  echo " profile: 배포대상 환경 프로파일(ex:dev, prod) "
  echo " root directory: project의 최상위 디렉토리. '.'은 현재 디렉토리 의미함. "
  echo " ex) ./deploy kubernetes-admin@kubernetes prod ~/work"
  echo " ex) ./deploy . prod ."
  exit 1
fi

######## functions ############
RETURN=""
function generate-cm() {
    RETURN="OK"
    if [ -f ${filepath} ]; then
        kubectl get configmap ${cm} -n ${ns} 2> /dev/null
        if [ $? -eq 0 ]; then
              kubectl delete configmap ${cm} -n ${ns}
        fi
        echo "*** RUN -> kubectl create configmap ${cm} --from-env-file=${filepath} -n ${ns}"
        kubectl create configmap ${cm} --from-env-file=${filepath} -n ${ns}
        if [ $? -eq 1 ]; then
              echo "FAIL to create configmap ${cm}"
              RETURN="NK"
        fi
    fi
}

function generate-secret() {
    RETURN="OK"
    if [ -f ${filepath} ]; then
        kubectl get secret ${secret} -n ${ns} 2> /dev/null
        if [ $? -eq 0 ]; then
              kubectl delete secret ${secret} -n ${ns}
        fi
        echo "*** RUN -> kubectl create secret generic ${secret} --from-env-file=${filepath} -n ${ns}"
        kubectl create secret generic ${secret} --from-env-file=${filepath} -n ${ns}
        if [ $? -eq 1 ]; then
              echo "FAIL to create secret ${secret}"
              RETURN="NK"
        fi
    fi
}

# get parameters
echo "STEP1: Get Parameters"

context=$1
profile=$2
basedir=$3

if [ $# -eq 4 ]; then 
  CTRLDIR=$4
fi

if [ "${context}" == "." ]; then
    context=`kubectl config current-context`
fi

# get namespace
file1=""
if [ -f ${basedir}/deploy/cicd.properties ]; then  # use config server 
  file1=cicd.properties
  ns=`cat ${basedir}/deploy/${file1} | grep namespace= | cut -d "=" -f 2`
elif [ -f ${basedir}/cicd/cicd-${profile}.properties ]; then
  file1=cicd-${profile}.properties
  ns=`cat ${basedir}/cicd/${file1} | grep namespace= | cut -d "=" -f 2`
elif [ -f ${basedir}/cicd/cicd-common.properties ]; then
  file1=cicd-common.properties
  ns=`cat ${basedir}/cicd/${file1} | grep namespace= | cut -d "=" -f 2`
fi
if [ "${file1}" == "" ]; then
  echo "CAN'T FIND cicd properties file"
  exit 1
fi
echo "NAMESPACE=>${ns}"
if [ "${ns}" == "" ]; then
  echo "CAN'T FIND namespace in ${file1}"
  exit 1
fi

echo ""

# set variables from config.properties: converted from '.' to '_'
echo "STEP2. Set environment variables "

if [ -f ${basedir}/deploy/cicd.properties ]; then
  eval $(${CTRLDIR}/cmd/set-env ${basedir}/deploy/cicd.properties)
else
  if [ -f ${basedir}/cicd/cicd-common.properties ]; then  #NOT use config server 
    cat ${basedir}/cicd/cicd-common.properties > ${basedir}/deploy/cicd.properties
    eval $(${CTRLDIR}/cmd/set-env ${basedir}/cicd/cicd-common.properties)
  fi
  if [ -f ${basedir}/cicd/cicd-${profile}.properties ]; then  #NOT use config server 
    echo " " >> ${basedir}/deploy/cicd.properties
    echo "# ${profile} " >> ${basedir}/deploy/cicd.properties
    cat ${basedir}/cicd/cicd-${profile}.properties >> ${basedir}/deploy/cicd.properties
    eval $(${CTRLDIR}/cmd/set-env ${basedir}/cicd/cicd-${profile}.properties)
  fi
fi

# Get Workload kind 
if [ "${workload_kind}" == "" ]; then
  deploy_kind="StatefulSet"
else
  deploy_kind="${workload_kind}"
fi

# switch kubenetes context
echo "STEP3. Switch to kubernetes context "

kubectl config use-context ${context}
echo ""

# check current version
echo "STEP4. Delete application if same version exists "

CURTAG=$(kubectl get ${deploy_kind} ${image_repository} -n ${ns} -o yaml 2> /dev/null | grep "image: ${image_registry}/${image_project}/${image_repository}:" | cut -d ':' -f4)
if [ "${CURTAG}" == "" ]; then
  echo ">>> NO SAME VERSION EXISTS"
else 
  echo ">>> FIND CURRENT VERSION: ${CURTAG}"
fi 

echo "deploy kind: ${deploy_kind}, version: ${CURTAG} -> ${image_tag}"

# 동일한 서비스의 동일한 버전이 있으면 변경내용 반영위해 기존 deployment 삭제
if [ $? -eq 0 ] && [ "${CURTAG}" == "${image_tag}" ]; then
    echo "[${image_repository}] Same version(${image_tag}) service exists!"

    kubectl delete ${deploy_kind} --selector="app=${image_repository}"
fi
echo ""

# configmap revise
mkdir -p ${basedir}/deploy

echo "STEP5. Create ConfigMap "

cm="${image_repository}-cm"
filepath=${basedir}/deploy/cm-converted.properties
tmp=${basedir}/deploy/tmp-cm.env
touch ${tmp}

# 현재 배포 대상 profile에 맞는 변수 셋팅을 위해 _dev또는 _prod붙어 있는 변수에서 _dev또는_prod를 제거함
# 예) mq_host_dev => mq_host
if [ -f ${basedir}/deploy/cm.properties ]; then  # use config server 
  sed "s@_${profile}=@=@g" ${basedir}/deploy/cm.properties > ${filepath}
  cp ${filepath} ${tmp}
  echo "" >> ${tmp}
fi
# add cicd.properties to environments
cat ${basedir}/deploy/cicd.properties >> ${tmp}

# project폴더의 cm-common.env, cm-{profile}.env파일 내용을 추가
if [ -f ${basedir}/cicd/cm-common.env ]; then
  cat ${basedir}/cicd/cm-common.env >> ${tmp}
  echo "" >> ${tmp}
fi
if [ -f ${basedir}/cicd/cm-${profile}.env ]; then
  cat ${basedir}/cicd/cm-${profile}.env >> ${tmp}
  echo "" >> ${tmp}
fi
sort -u ${tmp} > ${filepath}

generate-cm
if [ "${RESULT}" == "NK" ]; then exit 1; fi

echo ""

# secret revise
echo "STEP6. Create Secret "

secret="${image_repository}-secret"
filepath=${basedir}/deploy/secret-converted.properties
tmp=${basedir}/deploy/tmp-secret.env
touch ${tmp}

if [ -f ${basedir}/deploy/secret.properties ]; then
  sed "s@_${profile}=@=@g" ${basedir}/deploy/secret.properties > ${filepath}
  cp ${filepath} ${tmp}
  echo "" >> ${tmp}
fi
# project폴더의 secret-common.env, secret-{profile}.env파일 내용을 추가
if [ -f ${basedir}/cicd/secret-common.env ]; then
  cat ${basedir}/cicd/secret-common.env >> ${tmp}
  echo "" >> ${tmp}
fi
if [ -f ${basedir}/cicd/secret-${profile}.env ]; then
  cat ${basedir}/cicd/secret-${profile}.env >> ${tmp}
  echo "" >> ${tmp}
fi
sort -u ${tmp} > ${filepath}

generate-secret
if [ "${RESULT}" == "NK" ]; then exit 1; fi

echo "" 

# deploy.yaml을 이용하여 배포 yaml생성
echo "STEP7. Deploy application "

IMG="${image_registry}\/${image_project}\/${image_repository}:${image_tag}"

#Mac과 linux 모두에서 동작하기 위해 workaround적용
yaml=${basedir}/deploy/deploy.yaml
tmp=${basedir}/deploy/tmp.yaml
cp ${CTRLDIR}/deploy/deploy.yaml ${yaml}

sed "s@{{ WORKLOAD_KIND }}@${deploy_kind}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
if [ "${deploy_kind}" == "StatefulSet" ]; then
  sed "s@{{ DEFINE_SERVICE_NAME }}@serviceName: ${image_repository}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_MIN_READY_SECONDS }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
else
  sed "s@{{ DEFINE_SERVICE_NAME }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  if [ "${min_ready_seconds}" == "" ]; then
    sed "s@{{ DEFINE_MIN_READY_SECONDS }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  else
    sed "s@{{ DEFINE_MIN_READY_SECONDS }}@minReadySeconds: ${min_ready_seconds}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  fi
fi 
sed "s@{{ SERVICE_NAME }}@${image_repository}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ NAMESPACE }}@${namespace}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ SERVICEACCOUNT }}@${serviceaccount}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ IMAGE_NAME }}@${IMG}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ IMAGE_PULL_POLICY }}@${image_pull_policy}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ SERVICE_TARGET_PORT }}@${service_target_port}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ SERVICE_PORT }}@${service_port}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ SERVICE_REPLICAS }}@${service_replicas}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ EUREKA_SERVERS }}@${eureka_servers}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ PROFILE }}@${profile}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ REQ_CPU }}@${req_cpu}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ REQ_MEM }}@${req_mem}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ LIMIT_CPU }}@${limit_cpu}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
sed "s@{{ LIMIT_MEM }}@${limit_mem}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}

# Get readiness values
if ([ "${readiness_enabled}" == "" ]) || ([ "${readiness_enabled}" == "false" ]); then 
  sed "s@{{ DEFINE_READINESS }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_METHOD }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_PATH }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_PORT }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_DELAY_SECONDS }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_PERIOD_SECONDS }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_TIMEOUT_SECONDS }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_SUCCESS_THRESHOLD }}@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_FAILURE_THRESHOLD }@@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}  
else
  sed "s@{{ DEFINE_READINESS }}@readinessProbe:@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_METHOD }}@httpGet:@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_PATH }}@path: ${readiness_path}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_PORT }}@port: ${service_target_port}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  
  if [ "${readiness_delay_seconds}" == "" ]; then 
    readiness_delay_seconds=0
  fi 
  if [ "${readiness_period_seconds}" == "" ]; then 
    readiness_period_seconds=10
  fi 
  if [ "${readiness_timeout_seconds}" == "" ]; then 
    readiness_timeout_seconds=1
  fi
  if [ "${readiness_success_threshold}" == "" ]; then 
    readiness_success_threshold=1
  fi
  if [ "${readiness_failure_threshold}" == "" ]; then 
    readiness_failure_threshold=3
  fi
  sed "s@{{ DEFINE_READINESS_DELAY_SECONDS }}@initialDelaySeconds: ${readiness_delay_seconds}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_PERIOD_SECONDS }}@periodSeconds: ${readiness_period_seconds}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_TIMEOUT_SECONDS }}@timeoutSeconds: ${readiness_timeout_seconds}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_SUCCESS_THRESHOLD }}@successThreshold: ${readiness_success_threshold}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
  sed "s@{{ DEFINE_READINESS_FAILURE_THRESHOLD }@failureThreshold: ${readiness_failure_threshold}@g" ${yaml} > ${tmp} && mv ${tmp} ${yaml}
fi

sed "s@{{ SERVICE_HOST }}@${service_host}@g" ${yaml} > ${basedir}/deploy/deploy-converted.yaml

if [ $? -eq 0 ]; then
    echo "*** RUN -> kubectl apply -f ${basedir}/deploy/deploy-converted.yaml"
    kubectl apply -f ${basedir}/deploy/deploy-converted.yaml
else
    echo "******** FAIL to convert deployment yaml !!! ******** "
fi

echo ""
echo "************* END DEPLOY service *****************"
echo ""
exit 0
